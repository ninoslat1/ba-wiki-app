/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as CharacterSidebarImport } from './routes/character/_sidebar'
import { Route as CharacterCharacterDetailIndexImport } from './routes/character/character-detail/index'
import { Route as CharacterSidebarIndexImport } from './routes/character/_sidebar.index'

// Create Virtual Routes

const CharacterImport = createFileRoute('/character')()

// Create/Update Routes

const CharacterRoute = CharacterImport.update({
  id: '/character',
  path: '/character',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const CharacterSidebarRoute = CharacterSidebarImport.update({
  id: '/_sidebar',
  getParentRoute: () => CharacterRoute,
} as any)

const CharacterCharacterDetailIndexRoute =
  CharacterCharacterDetailIndexImport.update({
    id: '/character-detail/',
    path: '/character-detail/',
    getParentRoute: () => CharacterRoute,
  } as any)

const CharacterSidebarIndexRoute = CharacterSidebarIndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => CharacterSidebarRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/character': {
      id: '/character'
      path: '/character'
      fullPath: '/character'
      preLoaderRoute: typeof CharacterImport
      parentRoute: typeof rootRoute
    }
    '/character/_sidebar': {
      id: '/character/_sidebar'
      path: '/character'
      fullPath: '/character'
      preLoaderRoute: typeof CharacterSidebarImport
      parentRoute: typeof CharacterRoute
    }
    '/character/_sidebar/': {
      id: '/character/_sidebar/'
      path: '/'
      fullPath: '/character/'
      preLoaderRoute: typeof CharacterSidebarIndexImport
      parentRoute: typeof CharacterSidebarImport
    }
    '/character/character-detail/': {
      id: '/character/character-detail/'
      path: '/character-detail'
      fullPath: '/character/character-detail'
      preLoaderRoute: typeof CharacterCharacterDetailIndexImport
      parentRoute: typeof CharacterImport
    }
  }
}

// Create and export the route tree

interface CharacterSidebarRouteChildren {
  CharacterSidebarIndexRoute: typeof CharacterSidebarIndexRoute
}

const CharacterSidebarRouteChildren: CharacterSidebarRouteChildren = {
  CharacterSidebarIndexRoute: CharacterSidebarIndexRoute,
}

const CharacterSidebarRouteWithChildren =
  CharacterSidebarRoute._addFileChildren(CharacterSidebarRouteChildren)

interface CharacterRouteChildren {
  CharacterSidebarRoute: typeof CharacterSidebarRouteWithChildren
  CharacterCharacterDetailIndexRoute: typeof CharacterCharacterDetailIndexRoute
}

const CharacterRouteChildren: CharacterRouteChildren = {
  CharacterSidebarRoute: CharacterSidebarRouteWithChildren,
  CharacterCharacterDetailIndexRoute: CharacterCharacterDetailIndexRoute,
}

const CharacterRouteWithChildren = CharacterRoute._addFileChildren(
  CharacterRouteChildren,
)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/character': typeof CharacterSidebarRouteWithChildren
  '/character/': typeof CharacterSidebarIndexRoute
  '/character/character-detail': typeof CharacterCharacterDetailIndexRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/character': typeof CharacterSidebarIndexRoute
  '/character/character-detail': typeof CharacterCharacterDetailIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/character': typeof CharacterRouteWithChildren
  '/character/_sidebar': typeof CharacterSidebarRouteWithChildren
  '/character/_sidebar/': typeof CharacterSidebarIndexRoute
  '/character/character-detail/': typeof CharacterCharacterDetailIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/character' | '/character/' | '/character/character-detail'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/character' | '/character/character-detail'
  id:
    | '__root__'
    | '/'
    | '/character'
    | '/character/_sidebar'
    | '/character/_sidebar/'
    | '/character/character-detail/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  CharacterRoute: typeof CharacterRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  CharacterRoute: CharacterRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/character"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/character": {
      "filePath": "character",
      "children": [
        "/character/_sidebar",
        "/character/character-detail/"
      ]
    },
    "/character/_sidebar": {
      "filePath": "character/_sidebar.tsx",
      "parent": "/character",
      "children": [
        "/character/_sidebar/"
      ]
    },
    "/character/_sidebar/": {
      "filePath": "character/_sidebar.index.tsx",
      "parent": "/character/_sidebar"
    },
    "/character/character-detail/": {
      "filePath": "character/character-detail/index.tsx",
      "parent": "/character"
    }
  }
}
ROUTE_MANIFEST_END */
